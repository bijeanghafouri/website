df2 <- df[df[chosen_feature] != name, ]
}
}
}
return(df2)
}
df2 <- filter_dataframe(df, chosen_feature, feature_matrix, match_outcome)
df2
length(unique(df[[chosen_feature]]))
df2 <- filter_dataframe(df, chosen_feature, feature_matrix, match_outcome)
df2
### End recursion if necessary function. Possible that by now the dataframe is empty, so recursion needs to be stopped.
end_recursion <- function(df){
if(exists('df2') == FALSE){
return('End of recursion. Entropy gain maxed out. Dataframe is not null')
}
else if((nrow(df2) == 0) && (exists('df3') == FALSE)){
return("End of recursion: Dataframe is null. Second branch was not needed.")
}
else if((nrow(df2) == 0) && (exists('df3') == TRUE) && (nrow(df3) == 0)){
return("End of recursion: Dataframe is null. Second branch was needed.")
}
### And, finally, recursion !!!!
else{
print('the recursion proceeds.')
df <- df2
DTL(df, formula)
}
}
end_recursion(df2)
DTL(df, formula)
DTL(df, formula)
DTL(df, formula)
df <- res
df
DTL(df, formula)
res <- read.csv("Code/psyc625/Homeworks/assignments/3'/Resturant.csv", stringsAsFactors = T)
formula <- WillWait ~ Alt + Bar + Fri + Hun + Pat + Price + Rain + Res + Type + Est
df <- res
DTL <- function(df, formula){
library(DescTools)
### Parse formula function
parse_formula <- function(formula){
formul <- ParseFormula(formula, df)
return(formul)
}
formul <- parse_formula(formula)
formul
### Get outcome name. Will  be used later.
get_outcome_name <- function(formula){
outcome_name <- formul$lhs$vars
return(outcome_name)
}
outcome_name <- get_outcome_name(formul)
outcome_name
### Get outcome info
get_outcome_info <- function(formula){
outcome_vector <- formul$lhs$mf
outcome_values <- outcome_vector[[1]]
### find outcome probabilities
outcome_table <- as.table(table(outcome_values))
outcome_proptable <- prop.table(outcome_table)
w <- 1
outcome_prop_list <- array()
for(i in 1:length(outcome_proptable)){
outcome_prop_list[[w]] <- outcome_proptable[i]
w <- w + 1
}
outcome_prop_list  # returns list of probabilities for every value in the outcome
return(outcome_prop_list)
}
outcome_proportions <- get_outcome_info(formul)
outcome_proportions
### Get outcome entropy
get_outcome_entropy <- function(outcome_proportions){
outcome_prop_list <- outcome_proportions
# entropy of outcome
outcome_entro <- -(outcome_prop_list[1]*log(outcome_prop_list[1])) - (outcome_prop_list[2]*log(outcome_prop_list[2]))
### It could happen that the entropy = 1, when only one class of the outcome remains at the end. This will make code = NA, so to avoid we do the following:
suppressWarnings(if(outcome_prop_list[1] == 1){
outcome_entro <- 1
})
return(outcome_entro)
}
outcome_entropy <- get_outcome_entropy(outcome_proportions)
outcome_entropy
### Get features info
get_features_names <- function(formula){
feature_names <- formul$rhs$vars
return(feature_names)
}
feature_names <- get_features_names(formul)
feature_names
get_features_matrix <- function(formula){
feature_matrix <- formul$rhs$mf
return(feature_matrix)
}
feature_matrix <- get_features_matrix(formul)
feature_matrix
### Parse dataframe. Only keep relevant features that are in formula
keep_features <- function(df, feature_names, outcome_name){
df <- df[, c(feature_names,outcome_name)]
return(df)
}
df <- keep_features(df, feature_names, outcome_name)
### Match function: match features from formula in dataframe
#This will return vector of position of each feature in the dataframe columns. Will be used to calculate the entropy below.
get_matched <- function(feature_names, outcome_name, df){
match_num <- match(feature_names, names(df))
match_outcome <- match(outcome_name, names(df))
matches <- list(match_num, match_outcome)
return(matches)
}
match_features <- get_matched(feature_names, outcome_name, df)[[1]]
match_features
match_outcome <- get_matched(feature_names, outcome_name, df)[[2]]
match_outcome
### Entropy for features function. This will return a vector of the entropy GAIN for each feature.
get_feature_entropy <- function(df, match_outcome, match_features, outcome_entropy){
# Set the vector that will store the entropy of every feature
entro_gain <- array()
# initialize the counter at 0
w <- 1
# loop over every feature
for(i in match_features){
t <- table(df[i][[1]], df[match_outcome][[1]])
if(nrow(t) == 2){
prop_1 <- t[1, ]/sum(t[1, ])
prop_2 <- t[2, ]/sum(t[2, ])
total_probability <- prop.table(table(df[i]))
# first term
first <- total_probability[1]*(-prop_1[1]*log(prop_1[1]) - prop_1[2]*log(prop_1[2]))
if(is.na(first) == T){first <- 0}
if((first == 'NaN') == TRUE){first <- 0}
# second term
second <-  total_probability[2]*(-prop_2[1]*log(prop_2[1]) - prop_2[2]*log(prop_2[2]))
if(is.na(second) == T){second <- 0}
if(second == 'NaN'){second <- 0}
# entropy
entropy <- first + second
}
else if(nrow(t) == 3){
prop_1 <- t[1, ]/sum(t[1, ])
prop_2 <- t[2, ]/sum(t[2, ])
prop_3 <- t[3, ]/sum(t[3, ])
total_probability <- prop.table(table(feature_matrix[i]))
# first term
first <- total_probability[1]*(-prop_1[1]*log(prop_1[1]) - prop_1[2]*log(prop_1[2]))
if(is.na(first) == T){first <- 0}
if(first == 'NaN'){first <- 0}
# second term
second <-  total_probability[2]*(-prop_2[1]*log(prop_2[1]) - prop_2[2]*log(prop_2[2]))
if(is.na(second) == T){second <- 0}
if(second == 'NaN'){second <- 0}
# third term
third <- total_probability[3]*(-prop_3[1]*log(prop_3[1]) - prop_3[2]*log(prop_3[2]))
if(is.na(third) == T){third <- 0}
if(third == 'NaN'){third <- 0}
# entropy
entropy <- first + second + third
}
else if(nrow(t) == 4){
prop_1 <- t[1, ]/sum(t[1, ])
prop_2 <- t[2, ]/sum(t[2, ])
prop_3 <- t[3, ]/sum(t[3, ])
prop_4 <- t[4, ]/sum(t[4, ])
total_probability <- prop.table(table(feature_matrix[i]))
# first term
first <- total_probability[1]*(-prop_1[1]*log(prop_1[1]) - prop_1[2]*log(prop_1[2]))
if(is.na(first) == T){first <- 0}
if(first == 'NaN'){first <- 0}
# second term
second <-  total_probability[2]*(-prop_2[1]*log(prop_2[1]) - prop_2[2]*log(prop_2[2]))
if(is.na(second) == T){second <- 0}
if((second == 'NaN') == TRUE){second <- 0}
# third term
third <- total_probability[3]*(-prop_3[1]*log(prop_3[1]) - prop_3[2]*log(prop_3[2]))
if(is.na(third) == T){third <- 0}
if(third == 'NaN'){third <- 0}
# fourth term
fourth <- total_probability[4]*(-prop_4[1]*log(prop_4[1]) - prop_4[2]*log(prop_4[2]))
if(is.na(fourth) == T){fourth <- 0}
if(fourth == 'NaN'){fourth <- 0}
# entropy
entropy <- first + second + third + fourth
}
else{
print('...')
}
entro_gain[[w]] <- outcome_entropy - entropy
w <- w + 1
}
return(entro_gain)
}
feature_entropy <- get_feature_entropy(df, match_outcome, match_features, outcome_entropy)
### Create max function to find max entropy gain
maxi <- function(vector){
maximum <- 0
for(i in 1:length(vector)){
if(is.na(vector[i]) == T){vector[i] == 0}
if(vector[i] > maximum){
maximum <- vector[i]
}
}
return(maximum)
}
# Apply maxi that will be capable of detecting ties (sometimes entropy gains will be equal)
find_position_max <- function(feature_entropy){
max_entropy <- which(feature_entropy == maxi(feature_entropy))
return(max_entropy)
}
max_position <- find_position_max(feature_entropy)
max_position
### Create randomization function. Used to pick random feature if tie in entropy gain.
sampling <- function(elements) {
if (length(elements) <= 1) {
return(elements)
} else {
return(sample(elements, 1))
}
}
chosen_feature <- sampling(max_position)
chosen_feature
print(names(df[chosen_feature]))
if(exists('df2') == FALSE){
print('df2 not here wtf')
}
### Create new dataframe function. This will filter out chosen feature classes for which entropy is maximal. For feature classes that don't have maximal entropy, the tree will grow based on these. Here, I use 'unique' instead of 'levels' to find classes, because classes can be effectively eliminated when the dataframe is filtered. 'Unique' only identifies classes that remain, whereas 'Levels' identifies all of them.
filter_dataframe <- function(df, chosen_feature, feature_matrix, match_outcome){
if(length(unique(df[[chosen_feature]])) == 1){
t <- table(feature_matrix[chosen_feature][[1]], df[match_outcome][[1]])
prop_1 <- t[1, ]/sum(t[1, ])
if( (0 %in% prop_1 == TRUE) && ((nrow(df) == 1) == FALSE)){
name <- row.names(t)[1]
df2 <- df[df[chosen_feature] != name, ]
}
if( (0 %in% prop_1 == TRUE) && ((nrow(df2) == 1) == TRUE)){
print('end of recursion')
df2 <- df[FALSE, ]
}
# Patch:
if( (0 %in% prop_1 == FALSE) && ((nrow(df) == 1) == FALSE)){
df2 <- df
}
}
if(length(unique(df[[chosen_feature]])) == 2){
t <- table(feature_matrix[chosen_feature][[1]], df[match_outcome][[1]])
prop_1 <- t[1, ]/sum(t[1, ])
prop_2 <- t[2, ]/sum(t[2, ])
if(0 %in% prop_1 == TRUE){
name <- row.names(t)[1]
df2 <- df[df[chosen_feature] != name, ]
}
if( (0 %in% prop_2 == TRUE) && ((nrow(df2) == 1) == FALSE)){
name <- row.names(t)[2]
name
if(exists('df2') == TRUE){
df2 <- df2[df2[chosen_feature] != name, ]
}
else{
df2 <- df[df[chosen_feature] != name, ]
}
}
if( (0 %in% prop_2 == TRUE) && ((nrow(df2) == 1) == TRUE)){
print('end of recursion')
df2 <- df[FALSE, ]
}
# Patch here:
if((0 %in% prop_1 == TRUE) && (0 %in% prop_2 == TRUE)){
names <- row.names(t)
df2 <-  df[(!(df[chosen_feature] == names[1]) & !(df[chosen_feature] == names[2])), ]
}
# This is for splitting twice for each value of the feature
if( (0 %in% prop_1 == FALSE) && (0 %in% prop_2 == FALSE)){
# need to create a second dataframe (df3)
name1 <- row.names(t)[1]
df2 <- df[df[chosen_feature] != name1, ]
name2 <- row.names(t)[2]
df3 <- df[df[chosen_feature] != name2, ]
}
}
if(length(unique(df[[chosen_feature]])) == 3){
t <- table(feature_matrix[chosen_feature][[1]], df[match_outcome][[1]])
prop_1 <- t[1, ]/sum(t[1, ])
prop_2 <- t[2, ]/sum(t[2, ])
prop_3 <- t[3, ]/sum(t[3, ])
if(0 %in% prop_1 == TRUE){
name <- row.names(t)[1]
name
df2 <- df[df[chosen_feature] != name, ]
}
if(0 %in% prop_2 == TRUE){
name <- row.names(t)[2]
name
if(exists('df2') == TRUE){
df2 <- df2[df2[chosen_feature] != name, ]
}
else{
df2 <- df[df[chosen_feature] != name, ]
}
}
if(0 %in% prop_3 == TRUE){
name <- row.names(t)[3]
name
if(exists('df2') == TRUE){
df2 <- df2[df2[chosen_feature] != name, ]
}
else{
df2 <- df[df[chosen_feature] != name, ]
}
}
# Patch work:
if((0 %in% prop_1 == TRUE) && (0 %in% prop_2 == TRUE)){
names <- row.names(t)
df2 <-  df[(!(df[chosen_feature] == names[1]) & !(df[chosen_feature] == names[2])), ]
}
if((0 %in% prop_1 == TRUE) && (0 %in% prop_3 == TRUE)){
names <- row.names(t)
df2 <-  df[(!(df[chosen_feature] == names[1]) & !(df[chosen_feature] == names[3])), ]
}
if((0 %in% prop_2 == TRUE) && (0 %in% prop_3 == TRUE)){
names <- row.names(t)
df2 <-  df[(!(df[chosen_feature] == names[3]) & !(df[chosen_feature] == names[2])), ]
}
if((0 %in% prop_1 == TRUE) && (0 %in% prop_2 == TRUE) && (0 %in% prop_3 == TRUE)){
names <- row.names(t)
df2 <-  df[(!(df[chosen_feature] == names[1]) & !(df[chosen_feature] == names[2]) & !(df[chosen_feature] == names[3])), ]
}
}
if(length(unique(df[[chosen_feature]])) == 4){
t <- table(feature_matrix[chosen_feature][[1]], df[match_outcome][[1]])
prop_1 <- t[1, ]/sum(t[1, ])
prop_2 <- t[2, ]/sum(t[2, ])
prop_3 <- t[3, ]/sum(t[3, ])
prop_4 <- t[4, ]/sum(t[4, ])
if(0 %in% prop_1 == TRUE){
name <- row.names(t)[1]
name
df2 <- df[df[chosen_feature] != name, ]
}
if(0 %in% prop_2 == TRUE){
name <- row.names(t)[2]
name
if(exists('df2') == TRUE){
df2 <- df2[df2[chosen_feature] != name, ]
}
else{
df2 <- df[df[chosen_feature] != name, ]
}
}
if(0 %in% prop_3 == TRUE){
name <- row.names(t)[3]
name
if(exists('df2') == TRUE){
df2 <- df2[df2[chosen_feature] != name, ]
}
else{
df2 <- df[df[chosen_feature] != name, ]
}
}
if(0 %in% prop_4 == TRUE){
name <- row.names(t)[3]
name
if(exists('df2') == TRUE){
df2 <- df2[df2[chosen_feature] != name, ]
}
else{
df2 <- df[df[chosen_feature] != name, ]
}
}
}
return(df2)
}
df2 <- filter_dataframe(df, chosen_feature, feature_matrix, match_outcome)
df2
### End recursion if necessary function. Possible that by now the dataframe is empty, so recursion needs to be stopped.
end_recursion <- function(df){
if(exists('df2') == FALSE){
return('End of recursion. Entropy gain maxed out. Dataframe is not null')
}
else if((nrow(df2) == 0) && (exists('df3') == FALSE)){
return("End of recursion: Dataframe is null. Second branch was not needed.")
}
else if((nrow(df2) == 0) && (exists('df3') == TRUE) && (nrow(df3) == 0)){
return("End of recursion: Dataframe is null. Second branch was needed.")
}
### And, finally, recursion !!!!
else{
print('the recursion proceeds.')
df <- df2
DTL(df, formula)
}
}
end_recursion(df2)
}
DTL(df, formula)
DTL(df, formula)
DTL(df, formula)
DTL(df, formula)
# Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(df)
df
getmode(df$Alt)
install.packages('blogdown')
blogdown::install_hugo()
1+1
getwd()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
setwd("~/Documents/website/website")
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
knitr::opts_chunk$set(echo = TRUE)
print('hello world')
r
print('hello world')
r <- runif(10,)
r
print('hello world')
runif(42, 0, 2)
plot(mytree)
plot(mytree)
plot(mytree)
path <- c(
"root/a/some/file.R",
"root/a/another/file.R",
"root/a/another/cool/file.R",
"root/b/some/data.csv",
"root/b/more/data.csv"
)
library(data.tree); library(plyr)
install.packages('data.tree')
install/
install.packages('plyr')
install.packages('plyr')
path <- c(
"root/a/some/file.R",
"root/a/another/file.R",
"root/a/another/cool/file.R",
"root/b/some/data.csv",
"root/b/more/data.csv"
)
library(data.tree); library(plyr)
x <- lapply(strsplit(path, "/"), function(z) as.data.frame(t(z)))
x <- rbind.fill(x)
x$pathString <- apply(x, 1, function(x) paste(trimws(na.omit(x)), collapse="/"))
(mytree <- data.tree::as.Node(x))
plot(mytree)
install.packages('DiagrammeR')
library(data.tree); library(plyr); library(DiagrammeR)
path <- c(
"root/a/some/file.R",
"root/a/another/file.R",
"root/a/another/cool/file.R",
"root/b/some/data.csv",
"root/b/more/data.csv"
)
library(data.tree); library(plyr); library(DiagrammeR)
x <- lapply(strsplit(path, "/"), function(z) as.data.frame(t(z)))
x <- rbind.fill(x)
x$pathString <- apply(x, 1, function(x) paste(trimws(na.omit(x)), collapse="/"))
(mytree <- data.tree::as.Node(x))
plot(mytree)
path <- c(
"root/a/some/file.R",
"root/a/another/file.R",
"root/a/another/cool/file.R",
"root/b/some/data.csv",
"root/b/more/data.csv"
)
library(data.tree); library(plyr); library(DiagrammeR)
x <- lapply(strsplit(path, "/"), function(z) as.data.frame(t(z)))
x <- rbind.fill(x)
x$pathString <- apply(x, 1, function(x) paste(trimws(na.omit(x)), collapse="/"))
(mytree <- data.tree::as.Node(x))
(mytree <- data.tree::as.Node(data.frame(pathString = path)))
plot(mytree)
files<- c(
"root/dir1/some/file1.R",
"root/dir1/another1/file2.R",
"root/dir1/another1/new/file3.R",
"root/dir2/some/data1.csv",
"root/dir2/more/data2.csv"
)
library(data.tree)
library(plyr)
a <- lapply(strsplit(files, "/"), function(z) as.data.frame(t(z)))
a <- rbind.fill(a)
mytree <- data.tree::as.Node(data.frame(pathString = path))
plot(mytree)
setwd("~/Dropbox/My Mac (Bijean’s MacBook Pro)/Documents/website/website")
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
